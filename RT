-- Initialize Bot and World
local bot = getBot()
local world = bot:getWorld()
local inventory = bot:getInventory()

-- Convert important variables to uppercase
FarmWorldID = string.upper(FarmWorldID)
StorageWorld = string.upper(StorageWorld)
StorageWorldSeedID = string.upper(StorageWorldSeedID)
PackDropWorld = string.upper(PackDropWorld)
PackDropWorldID = string.upper(PackDropWorldID)
PickaxeWorld = string.upper(PickaxeWorld)
PickaxeWorldID = string.upper(PickaxeWorldID)

-- Bot settings
bot.collect_range = 4
bot.auto_collect = false

-- Utility: Sends a notification to a Discord webhook
function GonWebhook(message)
    local script = [[
    $webHookUrl = "]] .. WebhookUrl .. [["
    $embedObject = [PSCustomObject]@{
        color = Get-Random -Minimum 0 -Maximum 16777215
        title = 'Bot Notification'
        description = "**]] .. message .. [[**"
        footer = @{
            text = "]] .. "Bot Status | Date: " .. os.date("%d/%m/%y") .. " Time: " .. os.date("%I:%M %p") .. [["
        }
    }
    [System.Collections.ArrayList]$embedArray = @($embedObject)
    $payload = @{ embeds = $embedArray }
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType 'application/json'
    ]]
    local pipe = io.popen("powershell -command -", "w")
    pipe:write(script)
    pipe:close()
end

-- Utility: Ensures the bot is connected, with reconnection logic
function EnsureBotConnected(reconnectFunc, worldName, worldID)
    if bot.status ~= 1 then
        GonWebhook("Bot is offline. Reconnecting...")
        while bot.status ~= 1 do
            bot:connect()
            sleep(10000)
        end
        GonWebhook("Bot reconnected.")
        reconnectFunc(worldName, worldID)
    end
end

-- Join a specified world
function joinWorld(worldName, worldID)
    sleep(3000)
    bot:sendPacket(3, "action|join_request\nname|" .. worldName .. "|" .. worldID .. "\ninvitedWorld|0")
    sleep(6000)
    local currentWorld = world.name
    if currentWorld == "" or currentWorld == "EXIT" then
        joinWorld(worldName, worldID)
    end
    UpdateBotPosition()
end

-- Scan tree for harvest-ready tiles
function scanTree(treeID)
    local readyCount, unreadyCount = 0, 0
    for _, tile in pairs(world:getTiles()) do
        if tile.fg == treeID and tile:canHarvest() then
            readyCount = readyCount + 1
        else
            unreadyCount = unreadyCount + 1
        end
    end
    unreadyCount = unreadyCount - 3360 -- Account for empty/unharvestable tiles
    return { Ready = readyCount, Unready = unreadyCount }
end

-- Drop seeds or items based on inventory thresholds
function DropItems(itemID, dropCount, worldFunc)
    EnsureBotConnected(worldFunc)
    while inventory:getItemCount(itemID) > dropCount do
        sleep(500)
        bot:drop(itemID, inventory:getItemCount(itemID))
        sleep(500)
        bot:moveLeft()
    end
end

-- Main harvesting logic
function harvestFarm(worldName, treeID, seedID, blockLimit, delayHarvest)
    joinWorld(worldName, FarmWorldID)
    bot.auto_collect = true
    for i, tile in ipairs(world:getTiles()) do
        if tile.fg == seedID and tile:canHarvest() then
            bot:findPath(tile.x, tile.y)
            sleep(delayHarvest)
            bot:hit(tile.x, tile.y)
            sleep(delayHarvest)
            if inventory:getItemCount(treeID) >= blockLimit then
                break
            end
        end
    end
end

-- Helper: Updates the bot's current position
function UpdateBotPosition()
    if bot.status == 1 then
        local botPos = world:getLocal()
        if botPos then
            Botx = math.floor(botPos.posx / 32)
            Boty = math.floor(botPos.posy / 32)
        end
    end
end

-- Reconnection logic for different activities
function ReconnectToFarmWorld(worldName)
    EnsureBotConnected(joinWorld, worldName, FarmWorldID)
    UpdateBotPosition()
end

function ReconnectToStorage()
    EnsureBotConnected(joinWorld, StorageWorld, StorageWorldSeedID)
end

function ReconnectToPackDrop()
    EnsureBotConnected(joinWorld, PackDropWorld, PackDropWorldID)
end

-- Planting logic
function plantSeeds(worldName, seedID, delayPlant)
    ReconnectToFarmWorld(worldName)
    for _, tile in ipairs(world:getTiles()) do
        if world:getTile(tile.x, tile.y).fg == 0 and world:getTile(tile.x, tile.y + 1).fg ~= seedID then
            bot:findPath(tile.x, tile.y)
            sleep(delayPlant)
            bot:place(tile.x, tile.y, seedID)
            sleep(delayPlant)
        end
    end
end

-- Online check and reconnection handler
function EnsureBotOnline()
    if bot.status ~= 1 then
        GonWebhook("Bot offline. Reconnecting...")
        while bot.status ~= 1 do
            bot:connect()
            sleep(10000)
        end
        GonWebhook("Bot reconnected.")
    end
end

-- Main bot farming loop
while isOwner == true do
    for _, farmWorld in pairs(farmWorlds) do
        farmWorld = string.upper(farmWorld)
        ReconnectToFarmWorld(farmWorld)
        PickaxeControl()
        if world.name ~= farmWorld then
            joinWorld(farmWorld, FarmWorldID)
        end
        local trees = scanTree(BlockID + 1)
        GonWebhook("Farmed in " .. world.name .. ": Ready Trees = " .. trees.Ready .. ", Unready = " .. trees.Unready)
        sleep(10000) -- Adjust this delay as needed
    end
end
